#region Using directives
using System;
using System.Collections.Generic;
using System.Text;
using Sharp3D.Math.Core;
using System.Drawing;
#endregion

namespace TreeDim.StackBuilder.Basics
{
    #region Layer classes (box layer + interlayer)
    /// <summary>
    /// Layer interface to be implemented by either BoxLayer or InterlayerPos
    /// </summary>
    public interface ILayer
    {
        double ZLow { get; }
        int BoxCount { get; }
        int InterlayerCount { get; }
    }

    public class InterlayerPos : ILayer
    {
        #region Data members
        private double _zLower = 0.0;
        #endregion

        #region Constructor
        public InterlayerPos(double zLow)
        {
            _zLower = zLow;
        }
        #endregion

        #region ILayer implementation
        public double ZLow
        {
            get { return _zLower; }
        }
        public int BoxCount
        {
            get { return 0; }
        }
        public int InterlayerCount
        {
            get { return 1; }
        }
        #endregion
    }

    /// <summary>
    /// A layer of box
    /// </summary>
    public class BoxLayer : List<BoxPosition>, ILayer
    {
        #region Data members
        double _zLower = 0.0;
        #endregion

        #region Constructor
        public BoxLayer(double zLow)
        {
            _zLower = zLow;
        }
        #endregion

        #region Public properties
        public double ZLow
        {
            get { return _zLower; }
        }
        public int BoxCount
        {
            get { return Count; }
        }

        public int InterlayerCount
        {
            get { return 0; }
        }
        #endregion

        #region Public methods
        public void AddPosition(Vector3D vPosition, HalfAxis.HAxis dirLength, HalfAxis.HAxis dirWidth)
        {
            Add(new BoxPosition(vPosition, dirLength, dirWidth));
        }
        public void BoundingBox(BProperties bProperties, out double xmin, out double ymin, out double xmax, out double ymax)
        {
            xmin = ymin = double.MaxValue;
            xmax = ymax = double.MinValue;
            foreach (BoxPosition bpos in this)
            {
                Vector3D[] pts = new Vector3D[8];
                Vector3D vI = HalfAxis.ToVector3D(bpos.DirectionLength);
                Vector3D vJ = HalfAxis.ToVector3D(bpos.DirectionWidth);
                Vector3D vK = Vector3D.CrossProduct(vI, vJ);
                pts[0] = bpos.Position;
                pts[1] = bpos.Position + bProperties.Length * vI;
                pts[2] = bpos.Position + bProperties.Width * vJ;
                pts[3] = bpos.Position + bProperties.Length * vI + bProperties.Width * vJ;
                pts[4] = bpos.Position + bProperties.Height * vK;
                pts[5] = bpos.Position + bProperties.Width * vJ + bProperties.Height * vK; ;
                pts[6] = bpos.Position + HalfAxis.ToVector3D(bpos.DirectionWidth) * bProperties.Width;
                pts[7] = bpos.Position + HalfAxis.ToVector3D(bpos.DirectionLength) * bProperties.Length + HalfAxis.ToVector3D(bpos.DirectionWidth) * bProperties.Width;

                foreach (Vector3D pt in pts)
                {
                    xmin = Math.Min(xmin, pt.X);
                    xmax = Math.Max(xmax, pt.X);
                    ymin = Math.Min(ymin, pt.Y);
                    ymax = Math.Max(ymax, pt.Y);
                }
            }
        }
        public double Thickness(BProperties bProperties)
        {
            if (Count == 0) return 0.0;
            BoxPosition bPos = this[0];
            Vector3D diagonale = bProperties.Length * HalfAxis.ToVector3D(bPos.DirectionLength)
                                + bProperties.Width * HalfAxis.ToVector3D(bPos.DirectionWidth)
                                + bProperties.Height * Vector3D.CrossProduct(HalfAxis.ToVector3D(bPos.DirectionLength), HalfAxis.ToVector3D(bPos.DirectionWidth));
            return Math.Abs(diagonale.Z);            
        }
        #endregion
    }
    #endregion

    #region PalletSolution
    /// <summary>
    /// A set of box position and orientation that represent a valid solution
    /// </summary>
    public class PalletSolution : List<ILayer>, IComparable  
    {
        #region Data members
        private string _title;
        private bool _homogeneousLayer = false;
        private PalletAnalysis _parentAnalysis = null;
        #endregion

        #region Constructor
        public PalletSolution(PalletAnalysis analysis, string title, bool homogenousLayer)
        {
            _parentAnalysis = analysis;
            _title = title;
            _homogeneousLayer = homogenousLayer;
        }
        #endregion

        #region Public properties
        /// <summary>
        /// Solution title (generated by solver)
        /// </summary>
        public string Title
        {
            get { return _title; }
        }
        /// <summary>
        /// Parent analysis
        /// </summary>
        public PalletAnalysis Analysis
        {
            get { return _parentAnalysis; }
            set { _parentAnalysis = value; }
        }
        /// <summary>
        /// Case count
        /// </summary>
        public int CaseCount
        {
            get
            {
                int iCount = 0;
                foreach (ILayer layer in this)
                    iCount += layer.BoxCount;
                return iCount;
            }
        }
        /// <summary>
        /// Interlayer count
        /// </summary>
        public int InterlayerCount
        {
            get
            {
                int iCount = 0;
                foreach (ILayer layer in this)
                    iCount += layer.InterlayerCount;
                return iCount;
            }
        }
        /// <summary>
        /// Efficiency percentage
        /// </summary>
        public double Efficiency
        {
            get
            {
                return 100.0 * CaseCount * Analysis.BProperties.Volume
                    /
                    (
                        (Analysis.PalletProperties.Length - Analysis.ConstraintSet.OverhangX)
                        * (Analysis.PalletProperties.Width - Analysis.ConstraintSet.OverhangY)
                        * (Analysis.ConstraintSet.MaximumHeight - Analysis.PalletProperties.Height)
                    );
            }
        }
        /// <summary>
        /// Box efficiency percentage
        /// </summary>
        public double BoxEfficiency
        {
            get
            {
                CaseOfBoxesProperties caseOfBoxes = Analysis.BProperties as CaseOfBoxesProperties;
                if (null == caseOfBoxes)
                    return 0.0;
                return 100.0 * CaseCount * caseOfBoxes.NumberOfBoxes * caseOfBoxes.InsideBoxProperties.Volume
                    /
                    (
                        (Analysis.PalletProperties.Length - Analysis.ConstraintSet.OverhangX)
                        * (Analysis.PalletProperties.Width - Analysis.ConstraintSet.OverhangY)
                        * (Analysis.ConstraintSet.MaximumHeight - Analysis.PalletProperties.Height)
                    );
            }
        }
        /// <summary>
        /// Pallet weight
        /// </summary>
        public double PalletWeight
        {
            get
            {
                return Analysis.PalletProperties.Weight + CaseCount * Analysis.BProperties.Weight;
            }
        }
        public double PalletLength
        {
            get
            {
                double xmin = double.MaxValue, ymin = double.MaxValue;
                double xmax = double.MinValue, ymax = double.MinValue;

                int iLayer = 0, iLayerCount = 0;
                while (iLayer < Count && iLayerCount < 2)
                {
                    ILayer layer = this[iLayer];
                    BoxLayer blayer = layer as BoxLayer;
                    if (null != blayer)
                    {
                        double xminLayer = double.MaxValue, yminLayer = double.MaxValue;
                        double xmaxLayer = double.MinValue, ymaxLayer = double.MinValue;

                        blayer.BoundingBox(Analysis.BProperties, out xminLayer, out yminLayer, out xmaxLayer, out ymaxLayer);

                        xmin = Math.Min(xmin, xminLayer);
                        ymin = Math.Min(ymin, yminLayer);
                        xmax = Math.Max(xmax, xmaxLayer);
                        ymax = Math.Max(ymax, ymaxLayer);

                        ++iLayerCount;
                    }
                    ++iLayer;
                }
                return Math.Max(Analysis.PalletProperties.Length, xmax - xmin);
            }
        }
        public double PalletWidth
        {
            get
            {
                double xmin = double.MaxValue, ymin = double.MaxValue;
                double xmax = double.MinValue, ymax = double.MinValue;

                int iLayer = 0, iLayerCount = 0;
                while (iLayer < Count && iLayerCount < 2)
                {
                    ILayer layer = this[iLayer];
                    BoxLayer blayer = layer as BoxLayer;
                    if (null != blayer)
                    {
                        double xminLayer = double.MinValue, yminLayer = double.MinValue;
                        double xmaxLayer = double.MaxValue, ymaxLayer = double.MaxValue;

                        blayer.BoundingBox(Analysis.BProperties, out xminLayer, out yminLayer, out xmaxLayer, out ymaxLayer);

                        xmin = Math.Min(xmin, xminLayer);
                        ymin = Math.Min(ymin, yminLayer);
                        xmax = Math.Max(xmax, xmaxLayer);
                        ymax = Math.Max(ymax, ymaxLayer);

                        ++iLayerCount;
                    }
                    ++iLayer;
                }
                return Math.Max(Analysis.PalletProperties.Width, ymax - ymin);
            }
        }
        public double PalletHeight
        {
            get
            {
                BoxLayer bLayer = this[Count - 1] as BoxLayer;
                return this[Count - 1].ZLow + (null != bLayer ? bLayer.Thickness(Analysis.BProperties) : 0.0);
            }
        }
        public bool HasHomogeneousLayers
        {
            get { return _homogeneousLayer; }
            set { _homogeneousLayer = value; }
        }

        public string CaseOrientation
        {
            get { return "Z"; }
        }

        public Orientation FirstCaseOrientation
        {
            get
            {
                if (Count > 0)
                {
                    BoxLayer boxLayer = this[0] as BoxLayer;
                    if (null != boxLayer && boxLayer.Count > 0)
                        return new Orientation(boxLayer[0].DirectionLength, boxLayer[0].DirectionWidth);
                }
                return new Orientation();
            }
        }

        public double AverageLoadOnFirstLayerCase
        {
            get
            {
                // first box layer
                if (0 == this.CaseCount)
                    return 0.0;
                // all above first layer(s) weight
                double totalWeight = 0.0;
                for (int i = 1; i < this.Count; ++i)
                {
                    BoxLayer thisLayer = this[i] as BoxLayer;
                    totalWeight += thisLayer.Count * Analysis.BProperties.Weight;
                }
                BoxLayer boxlayer = this[0] as BoxLayer;
                return totalWeight / boxlayer.Count;
            }
        }
        #endregion

        #region Adding layer / interlayer
        public BoxLayer CreateNewLayer(double zLow)
        {
            BoxLayer layer = new BoxLayer(zLow);
            Add(layer);
            return layer;
        }
        public InterlayerPos CreateNewInterlayer(double zLow)
        {
            InterlayerPos layer = new InterlayerPos(zLow);
            Add(layer);
            return layer;
        }
        #endregion

        #region IComparable
        public int CompareTo(object obj)
        {
            PalletSolution sol = (PalletSolution)obj;
            if (this.CaseCount > sol.CaseCount)
                return -1;
            else if (this.CaseCount == sol.CaseCount)
                return 0;
            else
                return 1;
        }
        #endregion

        #region Object method overrides
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine(string.Format("=== Solution ===> {0} layers -> {1} boxes", this.Count, this.CaseCount));
            int index = 0;
            foreach (BoxLayer layer in this)
                foreach (BoxPosition boxPosition in layer)
                    sb.AppendLine(string.Format("{0} : {1}", index++, boxPosition.ToString()));
            return sb.ToString();
        }
        #endregion
    }
    #endregion
}