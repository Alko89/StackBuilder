#region Using directives
using System;
using System.Collections.Generic;
using System.Text;

using Sharp3D.Math.Core;
#endregion

namespace TreeDim.StackBuilder.Basics
{
    #region Limit enum : the different reasons the stacking process might be stopped
    public enum Limit
    {
        LIMIT_MAXHEIGHTREACHED
        , LIMIT_MAXWEIGHTREACHED
        , LIMIT_MAXNUMBERREACHED
        , LIMIT_UNKNOWN
    };
    #endregion

    #region ISolution
    public interface ISolution
    { 
        string Title { get; }
        Limit LimitReached { get; set; }
        double PalletWeight { get; }
        BBox3D BoundingBox { get; }
        BBox3D LoadBoundingBox { get; }
        double PalletLength { get; }
        double PalletWidth { get; }
        double PalletHeight { get; }
    }
    #endregion

    #region CylinderPalletSolution
    public class CylinderPalletSolution : List<ILayer>, IComparable, ISolution
    {
        #region Data members
        private string _title;
        private bool _homogeneousLayer = false;
        private CylinderPalletAnalysis _parentAnalysis;
        private Limit _limitReached = Limit.LIMIT_UNKNOWN;
        private BBox3D _bbox = new BBox3D();
        #endregion

        #region Constructor
        /// <summary>
        /// Constructor 
        /// </summary>
        public CylinderPalletSolution(CylinderPalletAnalysis analysis, string title, bool homogeneousLayer)
        {
            _parentAnalysis = analysis;
            _title = title;
            _homogeneousLayer = homogeneousLayer;
        }
        #endregion

        #region Public properties
        /// <summary>
        /// Solution title (generated by solver)
        /// </summary>
        public string Title
        {
            get { return _title; }
        }
        /// <summary>
        /// Parent analysis
        /// </summary>
        public CylinderPalletAnalysis Analysis
        {
            get { return _parentAnalysis; }
            set { _parentAnalysis = value; }
        }
        /// <summary>
        /// Cylinder count
        /// </summary>
        public int CylinderCount
        {
            get
            {
                int iCount = 0;
                foreach (ILayer layer in this)
                {
                    if (null != layer)
                        iCount += layer.CylinderCount;
                }
                return iCount;
            }
        }
        /// <summary>
        /// Cylinder per layer count
        /// </summary>
        public int CylinderPerLayerCount
        {
            get
            {
                if (0 == Count) return 0;
                return this[0].CylinderCount;
            }
        }
        /// <summary>
        /// cylinder layers count
        /// </summary>
        public int CylinderLayersCount
        {
            get
            {
                int cylinderLayerCount = 0;
                foreach (ILayer layer in this)
                    if (layer is CylinderLayer)
                        ++cylinderLayerCount;
                return cylinderLayerCount;
            }
        }
        /// <summary>
        /// Interlayer count
        /// </summary>
        public int InterlayerCount
        {
            get
            {
                int iCount = 0;
                foreach (ILayer layer in this)
                    iCount += layer.InterlayerCount;
                return iCount;
            }
        }
        /// <summary>
        /// first layer
        /// </summary>
        public CylinderLayer CylinderLayerFirst
        {
            get
            {
                foreach (ILayer layer in this)
                {
                    if (layer is CylinderLayer)
                        return layer as CylinderLayer;
                }
                return null;
            }
        }

        /// <summary>
        /// second layer
        /// </summary>
        public CylinderLayer CylinderLayerSecond
        {
            get
            {
                bool first = true;
                foreach (ILayer layer in this)
                {
                    if (first)
                        first = false;
                    else
                        return layer as CylinderLayer;
                }
                return null;
            }
        }
        /// <summary>
        /// has same count layers
        /// </summary>
        public bool HasSameCountLayers
        {
            get
            {
                bool first = true;
                int count1 = 0;
                foreach (ILayer layer in this)
                {
                    if (layer is CylinderLayer)
                    {
                        if (first)
                        {
                            count1 = layer.CylinderCount;
                            first = false;
                        }
                        else
                            return (count1 == layer.CylinderCount);
                    }
                }
                return false;
            }
        }
        public double VolumeEfficiency
        {
            get
            {
                return 100.0 * CylinderCount * Analysis.CylinderProperties.Volume
                    /
                    (
                        (Analysis.PalletProperties.Length + Analysis.ConstraintSet.OverhangX)
                        * (Analysis.PalletProperties.Width + Analysis.ConstraintSet.OverhangY)
                        * (Analysis.ConstraintSet.MaximumPalletHeight - Analysis.PalletProperties.Height)
                    );
            }
        }
        /// <summary>
        /// Weight efficiency (percentage)
        /// </summary>
        public double WeightEfficiency
        {
            get
            {
                return 100 * CylinderCount * Analysis.CylinderProperties.Weight
                    /
                    (Analysis.ConstraintSet.MaximumPalletWeight - Analysis.PalletProperties.Weight);
            }
        }
        /// <summary>
        /// Pallet weight
        /// </summary>
        public double PalletWeight
        {
            get { return Analysis.PalletProperties.Weight + CylinderCount * Analysis.CylinderProperties.Weight; } }

        public BBox3D BoundingBox
        {
            get
            {
                BBox3D bbox = new BBox3D();
                // --- extend
                // pallet
                bbox.Extend(Vector3D.Zero);
                bbox.Extend(new Vector3D(Analysis.PalletProperties.Length, Analysis.PalletProperties.Width, Analysis.PalletProperties.Height));
                // load
                bbox.Extend(LoadBoundingBox);
                // --- extend
                return bbox;
            }
        }
        public BBox3D LoadBoundingBox
        {
            get
            {
                if (!_bbox.IsValid)
                    _bbox = ComputeLoadBBox3D();
                return _bbox;
            }
        }

        private BBox3D ComputeLoadBBox3D()
        {
            BBox3D bbox = new BBox3D();
            int iLayer = 0;
            while (iLayer < Count)
            {
                ILayer layer = this[iLayer];
                CylinderLayer blayer = layer as CylinderLayer;
                if (null != blayer)
                    bbox.Extend(blayer.BoundingBox(Analysis.CylinderProperties));
                ++iLayer;
            }
            return bbox;
        }

        public double PalletLength
        { get { return BoundingBox.Length; } }
        public double PalletWidth
        { get { return BoundingBox.Width; } }
        public double PalletHeight
        {
            get
            {
                CylinderLayer cLayer = this[Count - 1] as CylinderLayer;
                return this[Count - 1].ZLow + (null != cLayer ? cLayer.Thickness(Analysis.CylinderProperties) : 0.0);
            }
        }
        #endregion

        #region Limit reached
        public Limit LimitReached
        {
            get { return _limitReached; }
            set { _limitReached = value; }
        }
        #endregion

        #region Adding layer / interlayer
        public CylinderLayer CreateNewLayer(double zLow)
        {
            CylinderLayer layer = new CylinderLayer(zLow);
            Add(layer);
            return layer;
        }
        public InterlayerPos CreateNewInterlayer(double zLow, int typeId)
        {
            InterlayerPos layer = new InterlayerPos(zLow, typeId);
            Add(layer);
            return layer;
        }
        #endregion

        #region IComparable
        public int CompareTo(object obj)
        {
            CylinderPalletSolution sol = (CylinderPalletSolution)obj;
            if (this.CylinderCount > sol.CylinderCount)
                return -1;
            else if (this.CylinderCount == sol.CylinderCount)
                return 0;
            else
                return 1;
        }
        #endregion

        #region Object method overrides
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine(string.Format("=== Solution ===> {0} layers -> {1} cylinders", this.Count, this.CylinderCount));
            int index = 0;
            foreach (CylinderLayer layer in this)
                foreach (Vector3D position in layer)
                    sb.AppendLine(string.Format("{0} : {1}", index++, position.ToString()));
            return sb.ToString(); 
        }
        #endregion
    }
    #endregion

    #region HCylinderPalletSolution
    public class HCylinderPalletSolution : List<CylPosition>, ISolution, IComparable 
    {
        #region Data members
        private string _title;
        private HCylinderPalletAnalysis _parentAnalysis;
        private Limit _limitReached = Limit.LIMIT_UNKNOWN;
        private BBox3D _bbox = new BBox3D();
        #endregion

        #region Constructor
        public HCylinderPalletSolution(HCylinderPalletAnalysis parentAnalysis, string title)
        {
            _parentAnalysis = parentAnalysis;
            _title = title;
        }
        #endregion

        #region Public properties
        public string Title { get { return _title; } }
        public int CylinderCount { get { return Count; } }
        public HCylinderPalletAnalysis Analysis
        {
            get { return _parentAnalysis; }
            set { _parentAnalysis = value; }
        }
        public BBox3D BoundingBox
        {
            get
            {
                BBox3D bbox = new BBox3D();
                // --- extend
                // pallet
                bbox.Extend(Vector3D.Zero);
                bbox.Extend(new Vector3D(Analysis.PalletProperties.Length, Analysis.PalletProperties.Width, Analysis.PalletProperties.Height));
                // load
                bbox.Extend(LoadBoundingBox);
                // --- extend
                return bbox;                
            }
        }
        public BBox3D LoadBoundingBox
        {
            get
            {
                if (!_bbox.IsValid)
                {
                    foreach (CylPosition pos in this)
                        _bbox.Extend(pos.BBox(_parentAnalysis.CylinderProperties.RadiusOuter, _parentAnalysis.CylinderProperties.Height));
                }
                return _bbox;
            }
        }

        #endregion

        #region Limit reached
        public Limit LimitReached
        {
            get { return _limitReached; }
            set { _limitReached = value; }
        }

        public double PalletWeight
        {
            get
            {
                return _parentAnalysis.PalletProperties.Weight + Count * _parentAnalysis.CylinderProperties.Weight;
            }
        }

        public double PalletLength { get { return BoundingBox.Length; } }
        public double PalletWidth { get { return BoundingBox.Width; } }
        public double PalletHeight { get { return BoundingBox.Height; } }
        #endregion

        #region IComparable
        public int CompareTo(object obj)
        {
            HCylinderPalletSolution sol = (HCylinderPalletSolution)obj;
            if (this.CylinderCount > sol.CylinderCount)
                return -1;
            else if (this.CylinderCount == sol.CylinderCount)
                return 0;
            else
                return 1;
        }
        #endregion

        #region Object method overrides
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine(string.Format("=== Solution ===> {0} cylinders", this.Count));
            return sb.ToString();
        }
        #endregion
    }
    #endregion
}
